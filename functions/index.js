const{defineString:defineString}=require("firebase-functions/params"),{onRequest:onRequest,onCall:onCall,HttpsError:HttpsError}=require("firebase-functions/v2/https"),admin=require("firebase-admin"),express=require("express"),cors=require("cors");admin.initializeApp();const stripe=require("stripe")(process.env.STRIPE_SECRET_KEY),db=admin.firestore(),app=express();async function updateUserSubscription(e,t){try{return await db.collection("users").doc(e).update({pro_account:"active"===t.status,subscription_status:t.status,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*t.current_period_end),subscription_start_date:admin.firestore.Timestamp.fromMillis(1e3*t.start_date),stripe_customer_id:t.customer,stripe_subscription_id:t.id,last_updated:admin.firestore.FieldValue.serverTimestamp()}),console.log(`Updated subscription for user ${e}`),!0}catch(e){return console.error(`Error updating user subscription: ${e.message}`),!1}}async function getUserIdFromCustomerId(e){try{const t=await db.collection("users").where("stripe_customer_id","==",e).limit(1).get();return t.empty?(console.warn(`No user found for Stripe customer: ${e}`),null):t.docs[0].id}catch(e){return console.error(`Error finding user for customer: ${e.message}`),null}}async function createStripeCustomer(e){try{const t=await stripe.customers.create({email:e.email,name:e.displayName||e.email,metadata:{firebaseUID:e.uid}});return await db.collection("users").doc(e.uid).update({stripe_customer_id:t.id}),t.id}catch(e){throw console.error(`Error creating Stripe customer: ${e.message}`),e}}async function getOrCreateCustomerId(e){const t=await db.collection("users").doc(e).get();if(!t.exists)throw new Error(`User with ID ${e} not found`);const r=t.data();if(r.stripe_customer_id)return r.stripe_customer_id;return createStripeCustomer(await admin.auth().getUser(e))}async function logPaymentActivity(e,t){try{await db.collection("payment_logs").add({user_id:e,payment_intent:t.payment_intent,payment_status:t.status,amount:t.amount_paid/100,currency:t.currency,invoice:t.invoice,subscription:t.subscription,timestamp:admin.firestore.FieldValue.serverTimestamp()})}catch(e){console.error(`Error logging payment: ${e.message}`)}}app.use(cors({origin:!0})),app.post("/createCheckoutSession",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,{priceId:i,successUrl:a,cancelUrl:n}=e.body;if(!i||!a||!n)return t.status(400).json({error:"Missing required parameters"});const c=await getOrCreateCustomerId(o),u=await stripe.checkout.sessions.create({payment_method_types:["card"],customer:c,line_items:[{price:i,quantity:1}],mode:"subscription",success_url:a,cancel_url:n,allow_promotion_codes:!0,metadata:{firebaseUID:o}});return t.status(200).json({url:u.url})}catch(e){return console.error("Error creating checkout session:",e),t.status(500).json({error:e.message})}})),app.post("/createPortalSession",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,{returnUrl:i}=e.body;if(!i)return t.status(400).json({error:"Missing return URL"});const a=await db.collection("users").doc(o).get();if(!a.exists)return t.status(404).json({error:"User not found"});const n=a.data();if(!n.stripe_customer_id)return t.status(400).json({error:"No subscription found for this user"});const c=await stripe.billingPortal.sessions.create({customer:n.stripe_customer_id,return_url:i});return t.status(200).json({url:c.url})}catch(e){return console.error("Error creating portal session:",e),t.status(500).json({error:e.message})}})),app.post("/checkSubscriptionStatus",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,i=await db.collection("users").doc(o).get();if(!i.exists)return t.status(404).json({error:"User not found"});const a=i.data(),n={isActive:Boolean(a.pro_account),status:a.subscription_status||"none",currentPeriodEnd:a.subscription_current_period_end?.toDate()||null,customerId:a.stripe_customer_id||null,subscriptionId:a.stripe_subscription_id||null};return t.status(200).json(n)}catch(e){return console.error("Error checking subscription status:",e),t.status(500).json({error:e.message})}})),exports.api=onRequest({cors:!0},app),exports.createCheckoutSession=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid,{priceId:s,successUrl:o,cancelUrl:i}=e;if(!s||!o||!i)throw new HttpsError("invalid-argument","Missing required parameters");try{const e=await getOrCreateCustomerId(r);return{url:(await stripe.checkout.sessions.create({payment_method_types:["card"],customer:e,line_items:[{price:s,quantity:1}],mode:"subscription",success_url:o,cancel_url:i,allow_promotion_codes:!0,metadata:{firebaseUID:r}})).url}}catch(e){throw console.error("Error creating checkout session:",e),new HttpsError("internal",e.message)}})),exports.createPortalSession=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid,{returnUrl:s}=e;if(!s)throw new HttpsError("invalid-argument","Missing return URL");try{const e=await db.collection("users").doc(r).get();if(!e.exists)throw new HttpsError("not-found","User not found");const t=e.data();if(!t.stripe_customer_id)throw new HttpsError("failed-precondition","No subscription found for this user");return{url:(await stripe.billingPortal.sessions.create({customer:t.stripe_customer_id,return_url:s})).url}}catch(e){throw console.error("Error creating portal session:",e),new HttpsError("internal",e.message)}})),exports.checkSubscriptionStatus=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid;try{const e=await db.collection("users").doc(r).get();if(!e.exists)throw new HttpsError("not-found","User not found");const t=e.data();return{isActive:Boolean(t.pro_account),status:t.subscription_status||"none",currentPeriodEnd:t.subscription_current_period_end||null,customerId:t.stripe_customer_id||null,subscriptionId:t.stripe_subscription_id||null}}catch(e){throw console.error("Error checking subscription status:",e),new HttpsError("internal",e.message)}})),exports.stripeWebhook=onRequest({cors:!0,rawBody:!0,region:"us-central1",memory:"1GiB",timeoutSeconds:60},(async(e,t)=>{if(t.set("Access-Control-Allow-Origin","*"),t.set("Access-Control-Allow-Methods","POST, OPTIONS"),t.set("Access-Control-Allow-Headers","Content-Type, Stripe-Signature"),"OPTIONS"===e.method)return t.status(204).send("");if("POST"!==e.method)return t.status(405).send("Method Not Allowed");const r=e.headers["stripe-signature"];if(!r)return console.error("No Stripe signature header found"),t.status(400).json({error:"Missing Stripe-Signature header"});let s,o=process.env.STRIPE_WEBHOOK_SECRET;const i=e.rawBody||e.body;try{console.log("Webhook signature verification attempt:",{hasSignature:!!r,hasRawBody:!!e.rawBody,hasBody:!!e.body,bodyType:typeof i,bodyIsBuffer:Buffer.isBuffer(i)}),s=stripe.webhooks.constructEvent(i,r,o),console.log(`✓ Webhook signature verified for event: ${s.type}`)}catch(e){return console.error("Webhook signature verification failed:",{error:e.message,code:e.code,hasEndpointSecret:!!o,signatureHeader:r?r.substring(0,20)+"...":"Missing",bodyLength:i?i.length:0}),t.status(400).json({error:`Webhook Error: ${e.message}`})}console.log(`Processing webhook event: ${s.type} (ID: ${s.id})`);try{const e=admin.firestore(),r=async t=>{try{const r=await e.collection("users").where("stripe_customer_id","==",t).limit(1).get();return r.empty?(console.warn(`No user found for Stripe customer: ${t}`),null):r.docs[0].id}catch(e){return console.error(`Error finding user for customer: ${e.message}`),null}},o=async(t,r)=>{try{return await e.collection("users").doc(t).update({pro_account:"active"===r.status,subscription_status:r.status,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*r.current_period_end),subscription_start_date:admin.firestore.Timestamp.fromMillis(1e3*r.start_date),stripe_customer_id:r.customer,stripe_subscription_id:r.id,last_updated:admin.firestore.FieldValue.serverTimestamp()}),console.log(`Updated subscription for user ${t}`),!0}catch(e){return console.error(`Error updating user subscription: ${e.message}`),!1}},i=async(t,r)=>{try{await e.collection("payment_logs").add({user_id:t,payment_intent:r.payment_intent,payment_status:r.status,amount:r.amount_paid/100,currency:r.currency,invoice:r.invoice,subscription:r.subscription,timestamp:admin.firestore.FieldValue.serverTimestamp()})}catch(e){console.error(`Error logging payment: ${e.message}`)}};switch(s.type){case"customer.subscription.created":{const t=s.data.object,i=await r(t.customer);i&&(await o(i,t),"active"===t.status&&await e.collection("users").doc(i).update({pro_account:!0,last_payment_date:admin.firestore.FieldValue.serverTimestamp(),last_payment_status:"succeeded"}),console.log(`✓ Processed subscription.created for user ${i}`));break}case"customer.subscription.updated":{const t=s.data.object,i=await r(t.customer);i&&(await o(i,t),await e.collection("users").doc(i).update({pro_account:"active"===t.status}),console.log(`✓ Processed subscription.updated for user ${i} (status: ${t.status})`));break}case"customer.subscription.deleted":{const t=s.data.object,i=await r(t.customer);i&&(await o(i,t),await e.collection("users").doc(i).update({pro_account:!1}),console.log(`✓ Processed subscription.deleted for user ${i}`));break}case"invoice.payment_succeeded":{const t=s.data.object,o=await r(t.customer);o&&t.subscription&&(await i(o,t),await e.collection("users").doc(o).update({last_payment_date:admin.firestore.Timestamp.fromMillis(1e3*t.created),last_payment_status:"succeeded",last_payment_amount:t.amount_paid/100}),console.log(`✓ Processed payment_succeeded for user ${o}`));break}case"invoice.payment_failed":{const t=s.data.object,o=await r(t.customer);o&&(await i(o,t),await e.collection("users").doc(o).update({last_payment_date:admin.firestore.Timestamp.fromMillis(1e3*t.created),last_payment_status:"failed"}),console.log(`✓ Processed payment_failed for user ${o}`));break}case"checkout.session.completed":{const e=s.data.object,t=e.metadata?.firebaseUID;if(t&&e.subscription){const r=await stripe.subscriptions.retrieve(e.subscription);await o(t,r),console.log(`✓ Processed checkout.session.completed for user ${t}`)}break}default:console.log(`Unhandled event type: ${s.type}`)}return t.status(200).json({received:!0,eventId:s.id,eventType:s.type})}catch(e){return console.error(`Error processing webhook event ${s.type}:`,{error:e.message,eventId:s.id,stack:e.stack}),t.status(200).json({received:!0,eventId:s.id,error:`Processing error: ${e.message}`})}}));