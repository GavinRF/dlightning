const functions=require("firebase-functions"),admin=require("firebase-admin"),stripe=require("stripe")(process.env.STRIPE_SECRET_KEY),cors=require("cors")({origin:["https://dlightning.org","https://www.dlightning.org"],methods:["GET","POST","OPTIONS"],allowedHeaders:["Content-Type","Authorization","X-Requested-With"],credentials:!0});admin.apps.length||admin.initializeApp();const db=admin.firestore(),usersCollection=db.collection("users");async function verifyAuth(e){const t=e.headers.authorization||"";if(!t.startsWith("Bearer "))throw new Error("Unauthorized: Bearer token required");try{const e=t.substring(7);return(await admin.auth().verifyIdToken(e)).uid}catch(e){throw console.error("Auth error:",e),new Error("Invalid authentication token")}}async function getOrCreateStripeCustomer(e){const t=await usersCollection.doc(e).get();if(!t.exists)throw new Error("User not found");const s=t.data();let r=s.stripe_customer_id||s.stripe_customer_key;if(r)try{return await stripe.customers.retrieve(r),r}catch(e){console.warn(`Stripe customer ${r} not found, creating new one`)}const o=await admin.auth().getUser(e);return r=(await stripe.customers.create({email:o.email||s.email,name:o.displayName||s.display_name,metadata:{firebaseUid:e}})).id,await usersCollection.doc(e).update({stripe_customer_id:r,stripe_customer_key:r}),r}async function handleCheckoutSessionCompleted(e){try{const t=e.metadata?.firebaseUid;if(!t)return void console.error("No Firebase UID found in session metadata");await usersCollection.doc(t).update({pro_account:!0,subscription_status:"active",subscription_start_date:admin.firestore.FieldValue.serverTimestamp(),last_payment_date:admin.firestore.FieldValue.serverTimestamp(),last_payment_status:"succeeded",subscription_updated:admin.firestore.FieldValue.serverTimestamp()}),console.log(`Updated user ${t} subscription status to active`)}catch(e){console.error("Error handling checkout session completed:",e)}}async function handleSubscriptionUpdated(e){try{const t=e.customer,s=await usersCollection.where("stripe_customer_id","==",t).limit(1).get();if(s.empty)return void console.error(`No user found with Stripe customer ID: ${t}`);const r=s.docs[0],o=(r.data(),{subscription_status:e.status,subscription_updated:admin.firestore.FieldValue.serverTimestamp(),subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*e.current_period_end)});"active"===e.status?o.pro_account=!0:"canceled"!==e.status&&"unpaid"!==e.status||(o.pro_account=!1),await r.ref.update(o),console.log(`Updated subscription status for user ${r.id} to ${e.status}`)}catch(e){console.error("Error handling subscription updated:",e)}}async function handleSubscriptionDeleted(e){try{const t=e.customer,s=await usersCollection.where("stripe_customer_id","==",t).limit(1).get();if(s.empty)return void console.error(`No user found with Stripe customer ID: ${t}`);const r=s.docs[0];await r.ref.update({pro_account:!1,subscription_status:"canceled",subscription_updated:admin.firestore.FieldValue.serverTimestamp()}),console.log(`Marked subscription as canceled for user ${r.id}`)}catch(e){console.error("Error handling subscription deleted:",e)}}async function handlePaymentFailed(e){try{const t=e.customer,s=await usersCollection.where("stripe_customer_id","==",t).limit(1).get();if(s.empty)return void console.error(`No user found with Stripe customer ID: ${t}`);const r=s.docs[0];await r.ref.update({last_payment_status:"failed",last_payment_date:admin.firestore.FieldValue.serverTimestamp(),last_payment_error:e.last_payment_error?.message||"Payment failed"}),console.log(`Recorded payment failure for user ${r.id}`)}catch(e){console.error("Error handling payment failed:",e)}}exports.createCheckoutSession=functions.https.onRequest(((e,t)=>cors(e,t,(async()=>{if("OPTIONS"===e.method)return t.set("Access-Control-Allow-Methods","GET, POST, OPTIONS"),t.set("Access-Control-Allow-Headers","Content-Type, Authorization"),void t.status(204).send("");try{const s=await verifyAuth(e),{priceId:r,successUrl:o,cancelUrl:i}=e.body||{};if(!r)return t.status(400).json({error:"priceId is required"});if(!o||!i)return t.status(400).json({error:"successUrl and cancelUrl are required"});const a=await getOrCreateStripeCustomer(s),n=await stripe.checkout.sessions.create({customer:a,payment_method_types:["card"],line_items:[{price:r,quantity:1}],mode:"subscription",allow_promotion_codes:!0,success_url:o,cancel_url:i,metadata:{firebaseUid:s}});t.json({url:n.url})}catch(e){console.error("Error creating checkout session:",e);const s=e.message.includes("Unauthorized")?401:e.message.includes("not found")?404:500;t.status(s).json({error:e.message||"An error occurred while creating the checkout session"})}})))),exports.createPortalSession=functions.https.onRequest(((e,t)=>cors(e,t,(async()=>{if("OPTIONS"===e.method)return t.set("Access-Control-Allow-Methods","GET, POST, OPTIONS"),t.set("Access-Control-Allow-Headers","Content-Type, Authorization"),void t.status(204).send("");try{const s=await verifyAuth(e),{returnUrl:r}=e.body||{},o=await getOrCreateStripeCustomer(s),i=await stripe.billingPortal.sessions.create({customer:o,return_url:r||process.env.APP_URL||"https://dlightning.org/account"});t.json({url:i.url})}catch(e){console.error("Error creating portal session:",e);const s=e.message.includes("Unauthorized")?401:e.message.includes("not found")?404:500;t.status(s).json({error:e.message||"An error occurred while creating the portal session"})}})))),exports.checkSubscriptionStatus=functions.https.onRequest(((e,t)=>cors(e,t,(async()=>{if("OPTIONS"===e.method)return t.set("Access-Control-Allow-Methods","GET, POST, OPTIONS"),t.set("Access-Control-Allow-Headers","Content-Type, Authorization"),void t.status(204).send("");try{const s=await verifyAuth(e),r=await usersCollection.doc(s).get();if(!r.exists)return t.status(404).json({error:"User not found"});const o=r.data(),i=o.stripe_customer_id||o.stripe_customer_key;if(!i)return t.json({isActive:!1});const a=(await stripe.subscriptions.list({customer:i,status:"active",limit:1})).data.length>0;a&&!o.pro_account&&await usersCollection.doc(s).update({pro_account:!0,subscription_status:"active",subscription_updated:admin.firestore.FieldValue.serverTimestamp()}),t.json({isActive:a})}catch(e){console.error("Error checking subscription status:",e);const s=e.message.includes("Unauthorized")?401:e.message.includes("not found")?404:500;t.status(s).json({error:e.message||"An error occurred while checking subscription status"})}})))),exports.stripeWebhook=functions.https.onRequest((async(e,t)=>{const s=e.headers["stripe-signature"],r=process.env.STRIPE_WEBHOOK_SECRET;if(!s||!r)return console.error("Missing Stripe signature or webhook secret"),t.status(400).send("Webhook Error: Missing signature");try{const o=stripe.webhooks.constructEvent(e.rawBody,s,r);switch(console.log(`Received Stripe event: ${o.type}`),o.type){case"checkout.session.completed":await handleCheckoutSessionCompleted(o.data.object);break;case"customer.subscription.created":case"customer.subscription.updated":await handleSubscriptionUpdated(o.data.object);break;case"customer.subscription.deleted":await handleSubscriptionDeleted(o.data.object);break;case"invoice.payment_failed":await handlePaymentFailed(o.data.object);break;default:console.log(`Unhandled event type: ${o.type}`)}t.json({received:!0})}catch(e){console.error("Webhook error:",e),t.status(400).send(`Webhook Error: ${e.message}`)}}));