const{defineString:defineString}=require("firebase-functions/params"),{onRequest:onRequest,onCall:onCall,HttpsError:HttpsError}=require("firebase-functions/v2/https"),admin=require("firebase-admin"),express=require("express"),cors=require("cors"),stripeSecretKey=defineString("STRIPE_SECRET_KEY",{description:"Stripe API Secret Key"}),stripeWebhookSecret=defineString("STRIPE_WEBHOOK_SECRET",{description:"Stripe Webhook Signing Secret"}),appUrl=defineString("APP_URL",{description:"Application URL",default:"https://dlightning.org"});admin.initializeApp();const stripe=require("stripe")(stripeSecretKey.value()),db=admin.firestore(),app=express();async function updateUserSubscription(e,t){try{return await db.collection("users").doc(e).update({pro_account:"active"===t.status,subscription_status:t.status,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*t.current_period_end),subscription_start_date:admin.firestore.Timestamp.fromMillis(1e3*t.start_date),stripe_customer_id:t.customer,stripe_subscription_id:t.id,last_updated:admin.firestore.FieldValue.serverTimestamp()}),console.log(`Updated subscription for user ${e}`),!0}catch(e){return console.error(`Error updating user subscription: ${e.message}`),!1}}async function getUserIdFromCustomerId(e){try{const t=await db.collection("users").where("stripe_customer_id","==",e).limit(1).get();return t.empty?(console.warn(`No user found for Stripe customer: ${e}`),null):t.docs[0].id}catch(e){return console.error(`Error finding user for customer: ${e.message}`),null}}async function createStripeCustomer(e){try{const t=await stripe.customers.create({email:e.email,name:e.displayName||e.email,metadata:{firebaseUID:e.uid}});return await db.collection("users").doc(e.uid).update({stripe_customer_id:t.id}),t.id}catch(e){throw console.error(`Error creating Stripe customer: ${e.message}`),e}}async function getOrCreateCustomerId(e){const t=await db.collection("users").doc(e).get();if(!t.exists)throw new Error(`User with ID ${e} not found`);const r=t.data();if(r.stripe_customer_id)return r.stripe_customer_id;return createStripeCustomer(await admin.auth().getUser(e))}async function logPaymentActivity(e,t){try{await db.collection("payment_logs").add({user_id:e,payment_intent:t.payment_intent,payment_status:t.status,amount:t.amount_paid/100,currency:t.currency,invoice:t.invoice,subscription:t.subscription,timestamp:admin.firestore.FieldValue.serverTimestamp()})}catch(e){console.error(`Error logging payment: ${e.message}`)}}app.use(cors({origin:!0})),app.post("/createCheckoutSession",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,{priceId:i,successUrl:n,cancelUrl:a}=e.body;if(!i||!n||!a)return t.status(400).json({error:"Missing required parameters"});const c=await getOrCreateCustomerId(o),u=await stripe.checkout.sessions.create({payment_method_types:["card"],customer:c,line_items:[{price:i,quantity:1}],mode:"subscription",success_url:n,cancel_url:a,allow_promotion_codes:!0,metadata:{firebaseUID:o}});return t.status(200).json({url:u.url})}catch(e){return console.error("Error creating checkout session:",e),t.status(500).json({error:e.message})}})),app.post("/createPortalSession",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,{returnUrl:i}=e.body;if(!i)return t.status(400).json({error:"Missing return URL"});const n=await db.collection("users").doc(o).get();if(!n.exists)return t.status(404).json({error:"User not found"});const a=n.data();if(!a.stripe_customer_id)return t.status(400).json({error:"No subscription found for this user"});const c=await stripe.billingPortal.sessions.create({customer:a.stripe_customer_id,return_url:i});return t.status(200).json({url:c.url})}catch(e){return console.error("Error creating portal session:",e),t.status(500).json({error:e.message})}})),app.post("/checkSubscriptionStatus",(async(e,t)=>{try{const r=e.headers.authorization;if(!r||!r.startsWith("Bearer "))return t.status(401).json({error:"Unauthorized"});const s=r.split("Bearer ")[1],o=(await admin.auth().verifyIdToken(s)).uid,i=await db.collection("users").doc(o).get();if(!i.exists)return t.status(404).json({error:"User not found"});const n=i.data(),a={isActive:Boolean(n.pro_account),status:n.subscription_status||"none",currentPeriodEnd:n.subscription_current_period_end?.toDate()||null,customerId:n.stripe_customer_id||null,subscriptionId:n.stripe_subscription_id||null};return t.status(200).json(a)}catch(e){return console.error("Error checking subscription status:",e),t.status(500).json({error:e.message})}})),exports.api=onRequest({cors:!0},app),exports.createCheckoutSession=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid,{priceId:s,successUrl:o,cancelUrl:i}=e;if(!s||!o||!i)throw new HttpsError("invalid-argument","Missing required parameters");try{const e=await getOrCreateCustomerId(r);return{url:(await stripe.checkout.sessions.create({payment_method_types:["card"],customer:e,line_items:[{price:s,quantity:1}],mode:"subscription",success_url:o,cancel_url:i,allow_promotion_codes:!0,metadata:{firebaseUID:r}})).url}}catch(e){throw console.error("Error creating checkout session:",e),new HttpsError("internal",e.message)}})),exports.createPortalSession=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid,{returnUrl:s}=e;if(!s)throw new HttpsError("invalid-argument","Missing return URL");try{const e=await db.collection("users").doc(r).get();if(!e.exists)throw new HttpsError("not-found","User not found");const t=e.data();if(!t.stripe_customer_id)throw new HttpsError("failed-precondition","No subscription found for this user");return{url:(await stripe.billingPortal.sessions.create({customer:t.stripe_customer_id,return_url:s})).url}}catch(e){throw console.error("Error creating portal session:",e),new HttpsError("internal",e.message)}})),exports.checkSubscriptionStatus=onCall({cors:!0},(async(e,t)=>{if(!t.auth)throw new HttpsError("unauthenticated","User must be logged in");const r=t.auth.uid;try{const e=await db.collection("users").doc(r).get();if(!e.exists)throw new HttpsError("not-found","User not found");const t=e.data();return{isActive:Boolean(t.pro_account),status:t.subscription_status||"none",currentPeriodEnd:t.subscription_current_period_end||null,customerId:t.stripe_customer_id||null,subscriptionId:t.stripe_subscription_id||null}}catch(e){throw console.error("Error checking subscription status:",e),new HttpsError("internal",e.message)}})),exports.stripeWebhook=onRequest({cors:!0,rawBody:!0},(async(e,t)=>{const r=e.headers["stripe-signature"];try{if(!e.rawBody)return console.error("Missing raw request body for Stripe signature verification"),t.status(400).json({error:"Webhook Error: No raw body available for signature verification"});const s=stripe.webhooks.constructEvent(e.rawBody,r,stripeWebhookSecret.value());switch(console.log(`Received webhook event: ${s.type}`),s.type){case"customer.subscription.created":{const e=s.data.object;console.log("Processing subscription creation for customer:",e.customer);const r=await db.collection("users").where("stripe_customer_id","==",e.customer).get();if(r.empty)return console.warn(`No user found for Stripe customer: ${e.customer}`),t.status(200).json({received:!0});const o=[];r.forEach((async t=>{const r=t.ref;o.push(r.update({pro_account:"active"===e.status,subscription_status:e.status,stripe_subscription_id:e.id,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*e.current_period_end),subscription_start_date:admin.firestore.Timestamp.fromMillis(1e3*e.start_date),last_payment_date:admin.firestore.FieldValue.serverTimestamp(),last_payment_status:"succeeded",last_updated:admin.firestore.FieldValue.serverTimestamp()}))})),await Promise.all(o),console.log(`Updated ${r.size} user(s) for subscription creation`);break}case"customer.subscription.updated":{const e=s.data.object;console.log("Processing subscription update for ID:",e.id);const r=await db.collection("users").where("stripe_subscription_id","==",e.id).get();if(r.empty)return console.warn(`No user found for subscription ID: ${e.id}`),t.status(200).json({received:!0});const o=[];r.forEach((async t=>{const r=t.ref;o.push(r.update({pro_account:"active"===e.status,subscription_status:e.status,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*e.current_period_end),last_updated:admin.firestore.FieldValue.serverTimestamp()}))})),await Promise.all(o),console.log(`Updated ${r.size} user(s) for subscription update`);break}case"customer.subscription.deleted":{const e=s.data.object;console.log("Processing subscription deletion for ID:",e.id);const r=await db.collection("users").where("stripe_subscription_id","==",e.id).get();if(r.empty)return console.warn(`No user found for subscription ID: ${e.id}`),t.status(200).json({received:!0});const o=[];r.forEach((async t=>{const r=t.ref;o.push(r.update({pro_account:!1,subscription_status:e.status,subscription_current_period_end:admin.firestore.Timestamp.fromMillis(1e3*e.current_period_end),last_updated:admin.firestore.FieldValue.serverTimestamp()}))})),await Promise.all(o),console.log(`Updated ${r.size} user(s) for subscription deletion`);break}case"invoice.payment_succeeded":{const e=s.data.object;if(console.log("Processing successful payment for customer:",e.customer),e.subscription){const t=await db.collection("users").where("stripe_subscription_id","==",e.subscription).get();if(t.empty)console.warn(`No user found for subscription: ${e.subscription}`);else{const r=[];t.forEach((async t=>{const s=t.ref;r.push(s.update({last_payment_date:admin.firestore.Timestamp.fromMillis(1e3*e.created),last_payment_status:"succeeded",last_payment_amount:e.amount_paid/100,last_updated:admin.firestore.FieldValue.serverTimestamp()})),r.push(db.collection("payment_logs").add({user_id:t.id,payment_intent:e.payment_intent,payment_status:"succeeded",amount:e.amount_paid/100,currency:e.currency,invoice:e.id,subscription:e.subscription,timestamp:admin.firestore.FieldValue.serverTimestamp()}))})),await Promise.all(r),console.log(`Updated ${t.size} user(s) for successful payment`)}}break}case"invoice.payment_failed":{const e=s.data.object;if(console.log("Processing failed payment for customer:",e.customer),e.subscription){const t=await db.collection("users").where("stripe_subscription_id","==",e.subscription).get();if(t.empty)console.warn(`No user found for subscription: ${e.subscription}`);else{const r=[];t.forEach((async t=>{const s=t.ref;r.push(s.update({last_payment_date:admin.firestore.Timestamp.fromMillis(1e3*e.created),last_payment_status:"failed",last_updated:admin.firestore.FieldValue.serverTimestamp()})),r.push(db.collection("payment_logs").add({user_id:t.id,payment_intent:e.payment_intent,payment_status:"failed",amount:e.amount_due/100,currency:e.currency,invoice:e.id,subscription:e.subscription,timestamp:admin.firestore.FieldValue.serverTimestamp()}))})),await Promise.all(r),console.log(`Updated ${t.size} user(s) for failed payment`)}}break}default:console.log(`Unhandled event type: ${s.type}`)}return t.status(200).json({received:!0})}catch(r){return console.error("Webhook error:",{error:r.message,stack:r.stack,headers:e.headers["stripe-signature"]?"Signature present":"No signature",bodyPresent:!!e.body,rawBodyPresent:!!e.rawBody}),t.status(400).json({error:`Webhook Error: ${r.message}`})}}));