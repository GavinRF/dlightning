class StripeClient{constructor(t={}){this.config={publishableKey:t.publishableKey||"pk_live_51Img78K5ZALgdbfFCDxjFQ8p0ZdoaozqL4qKqkJYRir3pGzcrlRBGvdqoq8ERRLVhhK7Y78q3PDpLhsH7pNss30U00RkPCgolE",functionBaseUrl:t.functionBaseUrl||"https://us-central1-experience-builder-m-v-wxacv7.cloudfunctions.net/api",retryAttempts:t.retryAttempts||2,retryDelay:t.retryDelay||1e3,productPrices:t.productPrices||{monthly:"price_1PnTWAK5ZALgdbfFDXytlpJ6",yearly:"price_1PnTdKK5ZALgdbfFhyRw7qma"}},this.stripe=null,this.initialized=!1,this.initStripe()}initStripe(){if(this.initialized)return this.stripe;try{return"undefined"==typeof Stripe?(console.warn("Stripe.js is not loaded yet. Make sure to include the Stripe script in your page."),null):(this.stripe=Stripe(this.config.publishableKey),this.initialized=!0,this.stripe)}catch(t){return console.error("Error initializing Stripe:",t),this.logError("initStripe",t),null}}async getCurrentUser(){const t=firebase.auth().currentUser;if(!t)throw new Error("User not authenticated");try{return await t.getIdToken(!0),t}catch(t){throw console.error("Token refresh failed:",t),this.logError("getCurrentUser",t),new Error(`Authentication error: ${t.message}`)}}async createCheckoutSession(t,e,n){try{const i=await this.getCurrentUser(),r=this.config.productPrices[t];if(!r)throw new Error(`Invalid plan selected: ${t}`);const o=await i.getIdToken(),s=`${this.config.functionBaseUrl}/createCheckoutSession`,a=await this.fetchWithRetry(s,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({priceId:r,successUrl:e,cancelUrl:n})});if(!a.ok){const t=await a.json();throw new Error(t.error||`HTTP error ${a.status}`)}const c=await a.json();if(!c.url)throw new Error("No checkout URL returned from server");return c.url}catch(t){throw console.error("Error creating checkout session:",t),this.logError("createCheckoutSession",t),t}}async createCustomerPortal(t,e=!0){try{const n=await this.getCurrentUser(),i=await n.getIdToken(),r=`${this.config.functionBaseUrl}/createPortalSession`,o=await this.fetchWithRetry(r,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i}`},body:JSON.stringify({returnUrl:t})});if(!o.ok){const t=await o.json();throw new Error(t.error||`HTTP error ${o.status}`)}const s=await o.json();return e&&s.url?void window.open(s.url,"_blank"):s}catch(t){throw console.error("Error creating portal session:",t),this.logError("createCustomerPortal",t),t}}async checkSubscriptionStatus(){try{const t=await this.getCurrentUser(),e=await t.getIdToken(),n=`${this.config.functionBaseUrl}/checkSubscriptionStatus`,i=await this.fetchWithRetry(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}});if(!i.ok){const t=await i.json();throw new Error(t.error||`HTTP error ${i.status}`)}return!0===(await i.json()).isActive}catch(t){return console.error("Error checking subscription status:",t),this.logError("checkSubscriptionStatus",t),!1}}async fetchWithRetry(t,e){let n;for(let i=0;i<=this.config.retryAttempts;i++)try{if(i>0){const t=Math.min(this.config.retryDelay*Math.pow(2,i-1),1e4);console.log(`Retry attempt ${i}/${this.config.retryAttempts} after ${t}ms`),await new Promise((e=>setTimeout(e,t)))}return await fetch(t,e)}catch(t){if(console.warn(`Fetch attempt ${i+1} failed:`,t),n=t,!t.message.includes("network")&&!t.message.includes("timeout"))throw t}throw n||new Error("All retry attempts failed")}logError(t,e){console.error(`Stripe operation failed: ${t}`,{message:e.message,stack:e.stack,code:e.code,time:(new Date).toISOString()})}}const stripeClient=new StripeClient;ProjectManager.prototype.showSubscriptionModal=function(t,e){if(!firebase.auth().currentUser)return this.showNotification("Please log in to subscribe","warning"),void showAuthModal("Log in to Subscribe","Create faster with <i>Dlightning⚡</i>");const n=document.querySelector("#subscription-modal");n&&n.remove();const i=document.createElement("div");i.className="modal subscription-modal",i.id="subscription-modal",i.innerHTML=`\n      <div class="modal-content">\n        <span class="close-modal">&times;</span>\n        <h2>${t||'Upgrade to Dlightning Pro <i class="fas fa-bolt"></i>'}</h2>\n        <p>${e||"Unlock the full potential of Dlightning."}</p>\n  \n        <div style="display: flex; justify-content: space-between; align-items: center; gap: 12px;">\n          <ul class="features-list">\n            <label><b>Subscription Features Include</b></label>\n            <li>Unlimited projects and screens</li>\n            <li>Early Access to new components</li>\n            <li>Image saving abilities</li>\n          </ul>\n        </div>\n  \n        <div class="subscription-cards">\n          <div class="subscription-card" data-plan="monthly" onclick="projectManager.selectPlan(this)">\n            <h3>1 Month Subscription</h3>\n            <div class="price">$8.00</div>\n            <div class="price-subtext">¢27/day</div>\n          </div>\n          \n          <div class="subscription-card" data-plan="yearly" onclick="projectManager.selectPlan(this)">\n            <h3>1 Year Subscription</h3>\n            <div class="price">$72.00</div>\n            <div class="price-subtext">$6.00/month</div>\n          </div>\n        </div>\n        <div class="modal-buttons">\n          <button class="subscribe-button" onclick="projectManager.handleSubscriptionPurchase(this)">Subscribe Now &emsp;<i class="fas fa-arrow-up-right-from-square"></i></button>\n          <button onclick="this.closest('.modal').remove()">Cancel</button>\n        </div>\n        <img src="img/stripe-logo.svg" alt="Stripe" style="width: 86px; margin: 0 -24px -34px 0; float: right;">\n      </div>\n    `,document.body.appendChild(i),i.style.display="flex";const r=i.querySelector(".close-modal");r&&r.addEventListener("click",(()=>{i.style.display="none"})),i.addEventListener("click",(t=>{t.target===i&&(i.style.display="none")}))},ProjectManager.prototype.selectPlan=function(t){t.parentElement.querySelectorAll(".subscription-card").forEach((t=>t.classList.remove("selected"))),t.classList.add("selected")},ProjectManager.prototype.handleSubscriptionPurchase=async function(t){const e=t.closest(".modal").querySelector(".subscription-card.selected");if(e)try{t.disabled=!0,t.innerHTML='<i class="fas fa-spinner fa-spin"></i> Processing...';const n=e.dataset.plan;if(!firebase.auth().currentUser)throw new Error("User not authenticated");const i=window.location.origin+window.location.pathname,r=`${i}?subscription=success`,o=`${i}?subscription=cancel`;this.showNotification("Preparing checkout...","info");const s=await stripeClient.createCheckoutSession(n,r,o);console.log("Opening Stripe Checkout in new tab:",s),this.showNotification("Opening checkout in new tab...","info"),window.open(s,"_blank")}catch(e){console.error("Subscription error:",e);let n=e.message||"Please try again";n.includes("CORS")||n.includes("Network Error")?n="Connection issue. Please try again later.":n.includes("internal")||n.includes("Server error")?n="Server issue. Please try again later.":n.includes("timeout")&&(n="Connection timeout. Please check your internet and try again."),this.showNotification("❌ "+n,"error"),t.disabled=!1,t.textContent="Subscribe Now"}else this.showNotification("Please select a subscription plan","warning")},ProjectManager.prototype.checkSubscriptionStatus=function(){const t=new URLSearchParams(window.location.search).get("subscription");"success"===t?(this.showNotification("✅ Subscription successful!","success"),window.history.replaceState(null,"",window.location.pathname),setTimeout((()=>{this.refreshUserStatus()}),2e3)):"cancel"===t&&(this.showNotification("❌ Subscription process canceled.","error"),window.history.replaceState(null,"",window.location.pathname))},ProjectManager.prototype.refreshUserStatus=async function(){try{if(!firebase.auth().currentUser)return;const t=await firebase.firestore().collection("users").doc(firebase.auth().currentUser.uid).get();t.exists&&t.data().pro_account&&(this.showNotification("✨ Pro features activated!","success"),document.querySelectorAll(".pro-feature").forEach((t=>{t.classList.remove("disabled"),t.removeAttribute("disabled")})),document.querySelectorAll(".pro-badge").forEach((t=>{t.textContent="PRO"})))}catch(t){console.error("Error refreshing user status:",t)}},ProjectManager.prototype.checkProjectLimit=async function(){try{if(!this.currentUser)return void showAuthModal("Sign In to Save Projects","Create more with Dlightning");const t=this.db.collection("project"),e=await t.where("owner","==",this.db.doc(`users/${this.currentUser.uid}`)).get().then((t=>t.size)),n=await this.db.collection("users").doc(this.currentUser.uid).get(),i=n.exists&&!0===n.data().pro_account;if(e>=2&&!i)return void this.showSubscriptionModal("Upgrade to Create Unlimited Projects","You've reached the limit for free projects.");this.handleNewProject()}catch(t){console.error("Error checking project limit:",t),this.showNotification("Error checking project limit","error")}};class SimplifiedAccountManager{constructor(){this.db=firebase.firestore(),this.auth=firebase.auth(),this.currentUser=null,this.subscriptionData=null,this.stripeClient=window.stripeClient||new StripeClient,this.initAuthListener(),this.setupEventListeners()}initAuthListener(){this.auth.onAuthStateChanged((async t=>{this.currentUser=t,t&&await this.fetchSubscriptionData()}))}setupEventListeners(){document.addEventListener("click",(t=>{t.target.closest("#settings-btn")&&this.showAccountModal()}))}async fetchSubscriptionData(){if(!this.currentUser)return null;try{const t=await this.db.collection("users").doc(this.currentUser.uid).get();if(!t.exists)return null;const e=t.data();return this.subscriptionData={isPro:!0===e.pro_account,status:e.subscription_status||"none",startDate:e.subscription_start_date?e.subscription_start_date.toDate():null,endDate:e.subscription_current_period_end?new Date(e.subscription_current_period_end):null,lastPayment:e.last_payment_date?e.last_payment_date.toDate():null,paymentStatus:e.last_payment_status||"none"},this.subscriptionData}catch(t){return console.error("Error fetching subscription data:",t),null}}formatDate(t){return t?new Date(t).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric"}):"N/A"}async showAccountModal(){await this.fetchSubscriptionData();const t=document.querySelector("#simplified-account-modal");t&&t.remove();const e=document.createElement("div");if(e.className="modal account-modal",e.id="simplified-account-modal",!this.currentUser)return e.innerHTML='\n        <div class="modal-content">\n          <button class="close-modal">&times;</button>\n          <h2>Account</h2>\n          <p>You need to sign in to access your account settings.</p>\n          <button id="account-sign-in-btn" class="account-action-btn">Sign In</button>\n        </div>\n      ',document.body.appendChild(e),e.style.display="flex",e.querySelector(".close-modal").addEventListener("click",(()=>{e.style.display="none"})),void e.querySelector("#account-sign-in-btn").addEventListener("click",(()=>{e.style.display="none",showAuthModal()}));const n=!0===(await this.db.collection("users").doc(this.currentUser.uid).get().then((t=>t.data()))).pro_account,i=this.subscriptionData?.endDate?this.formatDate(this.subscriptionData.endDate):"N/A";e.innerHTML=`\n      <div class="modal-content account-content">\n        <button class="close-modal">&times;</button>\n        <h2>Account Settings</h2>\n        \n        <div class="account-section user-info-section">\n          <div class="user-profile">\n            <img src="${this.currentUser.photoURL||"https://firebasestorage.googleapis.com/v0/b/experience-builder-m-v-wxacv7.appspot.com/o/avatar-placeholder.png?alt=media&token=6e0896e6-0285-46d9-b251-6b8ee8f690f4"}" \n                 alt="Profile" class="profile-image">\n            <div>\n              <h3>${this.currentUser.displayName||"User"}</h3>\n              <p>${this.currentUser.email}</p>\n            </div>\n          </div>\n          <button id="sign-out-btn" class="account-action-btn secondary">Log Out &nbsp;<i class="fas fa-sign-out-alt"></i></button>\n        </div>\n        \n        <div class="account-section subscription-section">\n          <h3>Subscription</h3>\n          <div class="subscription-details">\n            <div class="subscription-status">\n              <span class="status-value ${n?"active":"inactive"}">\n                ${n?"Active":"Free Tier"}\n              </span>\n            </div>\n            \n            ${n?`\n              <div class="subscription-info">\n                <div><span>Plan:</span> <span>Pro Plan</span></div>\n                <div><span>Next billing date:</span> <span>${i}</span></div>\n              </div>\n              <div class="subscription-actions">\n                <button id="manage-subscription-btn" class="primary-btn account-action-btn">UPDATE &nbsp;<i class="fas fa-bolt"></i></button>\n              </div>\n            `:'\n              <div class="subscription-upgrade">\n                <p>Upgrade to Pro to unlock all features:</p>\n                <ul>\n                  <li><i class="fas fa-check"></i> Unlimited projects</li>\n                  <li><i class="fas fa-check"></i> Image storage abilities</li>\n                  <li><i class="fas fa-check"></i> Advanced components</li>\n                </ul>\n                <button id="upgrade-subscription-btn" class="primary-btn">Dlightning Pro &nbsp;<i class="fas fa-bolt"></i></button>\n              </div>\n            '}\n          </div>\n        </div>\n        \n      </div>\n    `,document.body.appendChild(e),e.style.display="flex",e.querySelector(".close-modal").addEventListener("click",(()=>{e.style.display="none"})),e.querySelector("#sign-out-btn").addEventListener("click",(async()=>{try{projectManager&&await projectManager.handleSignOut(),await this.auth.signOut(),e.style.display="none"}catch(t){console.error("Error signing out:",t)}})),n?e.querySelector("#manage-subscription-btn").addEventListener("click",(()=>{this.openCustomerPortal()})):e.querySelector("#upgrade-subscription-btn").addEventListener("click",(()=>{e.style.display="none",projectManager&&projectManager.showSubscriptionModal()})),e.addEventListener("click",(t=>{t.target===e&&(e.style.display="none")}))}async openCustomerPortal(){try{if(!this.currentUser)throw new Error("You must be logged in to manage your subscription");const t=document.querySelector("#manage-subscription-btn");t&&(t.disabled=!0,t.innerHTML='<i class="fas fa-spinner fa-spin"></i> Loading...');const e=window.location.origin+window.location.pathname;console.log("Opening customer portal with return URL:",e),console.log("Using stripeClient:",!!this.stripeClient);const n=(await this.db.collection("users").doc(this.currentUser.uid).get()).data();if(!n||!n.stripe_customer_id)throw new Error("No Stripe customer ID found. You need to subscribe first.");if(this.stripeClient)await this.stripeClient.createCustomerPortal(e,!0);else{console.log("Using Firebase function fallback");const t=firebase.functions().httpsCallable("createPortalSession"),n=await t({returnUrl:e});if(!n.data||!n.data.url)throw new Error("No portal URL returned from server");console.log("Portal URL received:",n.data.url),window.open(n.data.url,"_blank")}t&&(t.disabled=!1,t.innerHTML="Update Subscription");const i=document.querySelector("#simplified-account-modal");i&&(i.style.display="none")}catch(t){console.error("Error opening customer portal:",t),console.log("Error details:",{message:t.message,code:t.code,stack:t.stack}),window.projectManager&&"function"==typeof window.projectManager.showNotification?window.projectManager.showNotification("Error: "+t.message,"error"):alert("Error opening subscription management portal: "+t.message);const e=document.querySelector("#manage-subscription-btn");e&&(e.disabled=!1,e.innerHTML="Update Subscription")}}}function addAccountManagerStyles(){const t=document.createElement("style");t.id="simplified-account-manager-styles",t.textContent="\n    .account-modal .modal-content {\n      max-width: 500px;\n      width: 90%;\n      color: var(--basic-txt-color);\n    }\n\n    .account-modal .modal-content h3 {\n    margin-top: 6px;\n    margin-bottom: 4px;\n    }\n\n    .account-modal .modal-content p {\n    margin-top: 4px;\n    margin-bottom: 6px;\n    }\n    \n    .account-section {\n      margin-bottom: 24px;\n      padding-bottom: 16px;\n      border-bottom: 1px solid var(--neutral-gray);\n    }\n    \n    .account-section:last-child {\n      border-bottom: none;\n      margin-bottom: 0;\n    }\n    \n    .user-info-section {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    \n    .user-profile {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n    }\n    \n    .profile-image {\n      width: 48px;\n      height: 48px;\n      border-radius: 50%;\n      object-fit: cover;\n    }\n    \n    .subscription-status {\n      margin-bottom: 12px;\n      margin-top: 16px;\n    }\n    \n    .status-value {\n      font-weight: bold;\n      padding: 4px 8px;\n      border-radius: 4px;\n    }\n    \n    .status-value.active {\n      background-color: rgba(39, 174, 96, 0.15);\n      color: #27ae60;\n    }\n    \n    .status-value.inactive {\n      background-color: rgba(189, 195, 199, 0.3);\n      color: var(--basic-txt-color);\n    }\n    \n    .subscription-info {\n      margin-bottom: 16px;\n    }\n    \n    .subscription-info div {\n      margin-bottom: 8px;\n      display: flex;\n    }\n    \n    .subscription-info div span:first-child {\n      width: 150px;\n      color: var(--placeholder-color);\n    }\n    \n    .subscription-actions, .subscription-upgrade {\n      margin-top: 16px;\n    }\n    \n    .preference-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 12px;\n    }\n    \n    .preference-select {\n      padding: 8px;\n      border-radius: 4px;\n      border: 1px solid var(--neutral-gray);\n      background-color: var(--input-bg-color);\n      color: var(--basic-txt-color);\n      min-width: 150px;\n    }\n    \n    .account-action-btn {\n      padding: 8px 16px;\n      border-radius: 4px;\n      border: none;\n      cursor: pointer;\n      transition: all 0.2s;\n    }\n    \n    .account-action-btn.secondary {\n      background-color: var(--neutral-gray);\n      color: var(--basic-txt-color);\n    }\n    \n    .primary-btn {\n      background-color: #0a70b4;\n      color: white;\n      padding: 10px 16px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-weight: 500;\n      display: inline-block;\n      text-align: center;\n      transition: all 0.2s;\n    }\n\n    .primary-btn i {\n      color: #fbd513;\n    }\n    \n    .primary-btn:hover {\n      filter: brightness(1.15);\n    }\n    \n    .subscription-upgrade ul {\n      margin: 12px 0;\n      padding-left: 16px;\n    }\n    \n    .subscription-upgrade li {\n      margin-bottom: 8px;\n      list-style: none;\n    }\n    \n    .subscription-upgrade li i {\n      color: var(--color-primary);\n      margin-right: 8px;\n    }\n  ",document.getElementById("simplified-account-manager-styles")||document.head.appendChild(t)}document.addEventListener("DOMContentLoaded",(()=>{addAccountManagerStyles(),window.simplifiedAccountManager=new SimplifiedAccountManager,initTheme();const t=document.querySelector("#settings-btn");t&&t.addEventListener("click",(()=>{window.simplifiedAccountManager.showAccountModal()}))}));