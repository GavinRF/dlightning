class StripeClient{constructor(e={}){this.config={publishableKey:e.publishableKey||"pk_live_51Img78K5ZALgdbfFCDxjFQ8p0ZdoaozqL4qKqkJYRir3pGzcrlRBGvdqoq8ERRLVhhK7Y78q3PDpLhsH7pNss30U00RkPCgolE",functionBaseUrl:e.functionBaseUrl||"https://us-central1-experience-builder-m-v-wxacv7.cloudfunctions.net/api",retryAttempts:e.retryAttempts||2,retryDelay:e.retryDelay||1e3,productPrices:e.productPrices||{monthly:"price_1PnTWAK5ZALgdbfFDXytlpJ6",yearly:"price_1PnTdKK5ZALgdbfFhyRw7qma"}},this.stripe=null,this.initialized=!1,this.initStripe()}initStripe(){if(this.initialized)return this.stripe;try{return"undefined"==typeof Stripe?(console.warn("Stripe.js is not loaded yet. Make sure to include the Stripe script in your page."),null):(this.stripe=Stripe(this.config.publishableKey),this.initialized=!0,this.stripe)}catch(e){return console.error("Error initializing Stripe:",e),this.logError("initStripe",e),null}}async getCurrentUser(){const e=firebase.auth().currentUser;if(!e)throw new Error("User not authenticated");try{return await e.getIdToken(!0),e}catch(e){throw console.error("Token refresh failed:",e),this.logError("getCurrentUser",e),new Error(`Authentication error: ${e.message}`)}}async createCheckoutSession(e,t,n){try{const r=await this.getCurrentUser(),s=this.config.productPrices[e];if(!s)throw new Error(`Invalid plan selected: ${e}`);const i=await r.getIdToken(),o=`${this.config.functionBaseUrl}/createCheckoutSession`,a=await this.fetchWithRetry(o,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i}`},body:JSON.stringify({priceId:s,successUrl:t,cancelUrl:n})});if(!a.ok){const e=await a.json();throw new Error(e.error||`HTTP error ${a.status}`)}const c=await a.json();if(!c.url)throw new Error("No checkout URL returned from server");return c.url}catch(e){throw console.error("Error creating checkout session:",e),this.logError("createCheckoutSession",e),e}}async createCustomerPortal(e,t=!0){try{const n=await this.getCurrentUser(),r=await n.getIdToken(),s=`${this.config.functionBaseUrl}/createPortalSession`,i=await this.fetchWithRetry(s,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify({returnUrl:e})});if(!i.ok){const e=await i.json();throw new Error(e.error||`HTTP error ${i.status}`)}const o=await i.json();return t&&o.url?void window.open(o.url,"_blank"):o}catch(e){throw console.error("Error creating portal session:",e),this.logError("createCustomerPortal",e),e}}async checkSubscriptionStatus(){try{const e=await this.getCurrentUser(),t=await e.getIdToken(),n=`${this.config.functionBaseUrl}/checkSubscriptionStatus`,r=await this.fetchWithRetry(n,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}});if(!r.ok){const e=await r.json();throw new Error(e.error||`HTTP error ${r.status}`)}return!0===(await r.json()).isActive}catch(e){return console.error("Error checking subscription status:",e),this.logError("checkSubscriptionStatus",e),!1}}async fetchWithRetry(e,t){let n;for(let r=0;r<=this.config.retryAttempts;r++)try{if(r>0){const e=Math.min(this.config.retryDelay*Math.pow(2,r-1),1e4);console.log(`Retry attempt ${r}/${this.config.retryAttempts} after ${e}ms`),await new Promise((t=>setTimeout(t,e)))}return await fetch(e,t)}catch(e){if(console.warn(`Fetch attempt ${r+1} failed:`,e),n=e,!e.message.includes("network")&&!e.message.includes("timeout"))throw e}throw n||new Error("All retry attempts failed")}logError(e,t){console.error(`Stripe operation failed: ${e}`,{message:t.message,stack:t.stack,code:t.code,time:(new Date).toISOString()})}}const stripeClient=new StripeClient;ProjectManager.prototype.showSubscriptionModal=function(e,t){if(!firebase.auth().currentUser)return this.showNotification("Please log in to subscribe","warning"),void showAuthModal("Log in to Subscribe","Create faster with <i>Dlightning⚡</i>");const n=document.querySelector("#subscription-modal");n&&n.remove();const r=document.createElement("div");r.className="modal subscription-modal",r.id="subscription-modal",r.innerHTML=`\n      <div class="modal-content">\n        <span class="close-modal">&times;</span>\n        <h2>${e||"Upgrade to Pro"}</h2>\n        <p>${t||"Unlock the full potential of Dlightning."}</p>\n  \n        <div style="display: flex; justify-content: space-between; align-items: center; gap: 12px;">\n          <ul class="features-list">\n            <label><b>Subscription Features Include</b></label>\n            <li>Unlimited projects and screens</li>\n            <li>Early Access to new components</li>\n            <li>Image saving abilities</li>\n          </ul>\n        </div>\n  \n        <div class="subscription-cards">\n          <div class="subscription-card" data-plan="monthly" onclick="projectManager.selectPlan(this)">\n            <h3>1 Month Subscription</h3>\n            <div class="price">$8.00</div>\n            <div class="price-subtext">¢27/day</div>\n          </div>\n          \n          <div class="subscription-card" data-plan="yearly" onclick="projectManager.selectPlan(this)">\n            <h3>1 Year Subscription</h3>\n            <div class="price">$72.00</div>\n            <div class="price-subtext">$6.00/month</div>\n          </div>\n        </div>\n        <div class="modal-buttons">\n          <button class="subscribe-button" onclick="projectManager.handleSubscriptionPurchase(this)">Subscribe Now &emsp;<i class="fas fa-arrow-up-right-from-square"></i></button>\n          <button onclick="this.closest('.modal').remove()">Cancel</button>\n        </div>\n        <img src="img/stripe-logo.svg" alt="Stripe" style="width: 86px; margin: 0 -24px -34px 0; float: right;">\n      </div>\n    `,document.body.appendChild(r),r.style.display="flex";const s=r.querySelector(".close-modal");s&&s.addEventListener("click",(()=>{r.style.display="none"})),r.addEventListener("click",(e=>{e.target===r&&(r.style.display="none")}))},ProjectManager.prototype.selectPlan=function(e){e.parentElement.querySelectorAll(".subscription-card").forEach((e=>e.classList.remove("selected"))),e.classList.add("selected")},ProjectManager.prototype.handleSubscriptionPurchase=async function(e){const t=e.closest(".modal").querySelector(".subscription-card.selected");if(t)try{e.disabled=!0,e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Processing...';const n=t.dataset.plan;if(!firebase.auth().currentUser)throw new Error("User not authenticated");const r=window.location.origin+window.location.pathname,s=`${r}?subscription=success`,i=`${r}?subscription=cancel`;this.showNotification("Preparing checkout...","info");const o=await stripeClient.createCheckoutSession(n,s,i);console.log("Opening Stripe Checkout in new tab:",o),this.showNotification("Opening checkout in new tab...","info"),window.open(o,"_blank")}catch(t){console.error("Subscription error:",t);let n=t.message||"Please try again";n.includes("CORS")||n.includes("Network Error")?n="Connection issue. Please try again later.":n.includes("internal")||n.includes("Server error")?n="Server issue. Please try again later.":n.includes("timeout")&&(n="Connection timeout. Please check your internet and try again."),this.showNotification("❌ "+n,"error"),e.disabled=!1,e.textContent="Subscribe Now"}else this.showNotification("Please select a subscription plan","warning")},ProjectManager.prototype.checkSubscriptionStatus=function(){const e=new URLSearchParams(window.location.search).get("subscription");"success"===e?(this.showNotification("✅ Subscription successful!","success"),window.history.replaceState(null,"",window.location.pathname),setTimeout((()=>{this.refreshUserStatus()}),2e3)):"cancel"===e&&(this.showNotification("❌ Subscription process canceled.","error"),window.history.replaceState(null,"",window.location.pathname))},ProjectManager.prototype.refreshUserStatus=async function(){try{if(!firebase.auth().currentUser)return;const e=await firebase.firestore().collection("users").doc(firebase.auth().currentUser.uid).get();e.exists&&e.data().pro_account&&(this.showNotification("✨ Pro features activated!","success"),document.querySelectorAll(".pro-feature").forEach((e=>{e.classList.remove("disabled"),e.removeAttribute("disabled")})),document.querySelectorAll(".pro-badge").forEach((e=>{e.textContent="PRO"})))}catch(e){console.error("Error refreshing user status:",e)}},ProjectManager.prototype.checkProjectLimit=async function(){try{if(!this.currentUser)return void showAuthModal("Log in or Sign Up to Save Projects","Create more with Dlightning");const e=this.db.collection("project"),t=await e.where("owner","==",this.db.doc(`users/${this.currentUser.uid}`)).get().then((e=>e.size)),n=await this.db.collection("users").doc(this.currentUser.uid).get(),r=n.exists&&!0===n.data().pro_account;if(t>=2&&!r)return void this.showSubscriptionModal("Upgrade to Create Unlimited Projects","You've reached the limit for free projects.");this.handleNewProject()}catch(e){console.error("Error checking project limit:",e),this.showNotification("Error checking project limit","error")}};class AccountManager{constructor(){this.db=firebase.firestore(),this.auth=firebase.auth(),this.currentUser=null,this.subscriptionData=null,this.initAuthListener()}initAuthListener(){this.auth.onAuthStateChanged((async e=>{this.currentUser=e,e&&await this.fetchSubscriptionData()}))}async fetchSubscriptionData(){if(!this.currentUser)return null;try{const e=await this.db.collection("users").doc(this.currentUser.uid).get();if(!e.exists)return null;const t=e.data();return this.subscriptionData={isPro:!0===t.pro_account,status:t.subscription_status||"none",startDate:t.subscription_start_date?t.subscription_start_date.toDate():null,endDate:t.subscription_current_period_end?new Date(t.subscription_current_period_end):null,lastPayment:t.last_payment_date?t.last_payment_date.toDate():null,paymentStatus:t.last_payment_status||"none"},this.subscriptionData}catch(e){return console.error("Error fetching subscription data:",e),null}}async showAccountModal(){await this.fetchSubscriptionData();const e=document.querySelector("#account-modal");e&&e.remove();const t=document.createElement("div");if(t.className="modal account-modal",t.id="account-modal",!this.currentUser)return t.innerHTML='\n          <div class="modal-content">\n            <button class="close-modal">&times;</button>\n            <h2>Account</h2>\n            <p>You need to sign in to access your account settings.</p>\n            <button id="account-sign-in-btn" class="account-action-btn">Sign In</button>\n          </div>\n        ',document.body.appendChild(t),t.style.display="flex",t.querySelector(".close-modal").addEventListener("click",(()=>{t.style.display="none"})),void t.querySelector("#account-sign-in-btn").addEventListener("click",(()=>{t.style.display="none",showAuthModal()}));const n=await this.db.collection("users").doc(this.currentUser.uid).get().then((e=>e.data())),r=!0===n.pro_account,s=(n.subscription_status,e=>e?new Date(e).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric"}):"N/A"),i=this.subscriptionData?.endDate?s(this.subscriptionData.endDate):"N/A",o=this.subscriptionData?.startDate?s(this.subscriptionData.startDate):"N/A";t.innerHTML=`\n        <div class="modal-content account-content">\n          <button class="close-modal">&times;</button>\n          <h2>Account Settings</h2>\n          \n          <div class="account-section user-info-section">\n            <div class="user-profile">\n              <img src="${this.currentUser.photoURL||"https://firebasestorage.googleapis.com/v0/b/experience-builder-m-v-wxacv7.appspot.com/o/avatar-placeholder.png?alt=media&token=6e0896e6-0285-46d9-b251-6b8ee8f690f4"}" \n                   alt="Profile" class="profile-image">\n              <div>\n                <h3>${this.currentUser.displayName||"User"}</h3>\n                <p>${this.currentUser.email}</p>\n              </div>\n            </div>\n            <button id="sign-out-btn" class="account-action-btn secondary">Sign Out</button>\n          </div>\n          \n          <div class="account-section subscription-section">\n            <h3>Subscription</h3>\n            <div class="subscription-details">\n              <div class="subscription-status">\n                <span class="status-label">Status:</span>\n                <span class="status-value ${r?"active":"inactive"}">\n                  ${r?"Active":"Free Tier"}\n                </span>\n              </div>\n              \n              ${r?`\n                <div class="subscription-info">\n                  <div><span>Plan:</span> <span>Pro Plan</span></div>\n                  <div><span>Started:</span> <span>${o}</span></div>\n                  <div><span>Next billing date:</span> <span>${i}</span></div>\n                </div>\n                <div class="subscription-actions">\n                  <button id="manage-subscription-btn" class="account-action-btn">Manage Subscription</button>\n                </div>\n              `:'\n                <div class="subscription-upgrade">\n                  <p>Upgrade to Pro to unlock all features:</p>\n                  <ul>\n                    <li><i class="fas fa-check"></i> Unlimited projects</li>\n                    <li><i class="fas fa-check"></i> Firebase image storage</li>\n                    <li><i class="fas fa-check"></i> Advanced components</li>\n                    <li><i class="fas fa-check"></i> Priority support</li>\n                  </ul>\n                  <button id="upgrade-subscription-btn" class="account-action-btn primary">Upgrade to Pro</button>\n                </div>\n              '}\n            </div>\n          </div>\n          \n          <div class="account-section">\n            <h3>Preferences</h3>\n            <div class="preferences-options">\n              <div class="preference-item">\n                <label for="theme-preference">Theme</label>\n                <select id="theme-preference" class="preference-select">\n                  <option value="light">Light</option>\n                  <option value="dark">Dark</option>\n                  <option value="system">System Default</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(t),t.style.display="flex";const a=localStorage.getItem("theme-preference")||"system",c=t.querySelector("#theme-preference");c&&(c.value=a,c.addEventListener("change",(()=>{localStorage.setItem("theme-preference",c.value),applyTheme(c.value)}))),t.querySelector(".close-modal").addEventListener("click",(()=>{t.style.display="none"})),t.querySelector("#sign-out-btn").addEventListener("click",(async()=>{try{projectManager&&await projectManager.handleSignOut(),await this.auth.signOut(),t.style.display="none"}catch(e){console.error("Error signing out:",e)}})),r?t.querySelector("#manage-subscription-btn").addEventListener("click",(()=>{this.openCustomerPortal()})):t.querySelector("#upgrade-subscription-btn").addEventListener("click",(()=>{t.style.display="none",projectManager&&projectManager.showSubscriptionModal()})),t.addEventListener("click",(e=>{e.target===t&&(t.style.display="none")}))}async openCustomerPortal(){try{if(!this.currentUser)throw new Error("You must be logged in to manage your subscription");const e=document.querySelector("#manage-subscription-btn");e&&(e.disabled=!0,e.innerHTML='<i class="fas fa-spinner fa-spin"></i> Loading...');const t=firebase.functions().httpsCallable("createPortalSession"),n=await t({returnUrl:window.location.origin+"/account"});window.location.href=n.data.url}catch(e){console.error("Error opening customer portal:",e);const t=document.querySelector("#manage-subscription-btn");t&&(t.disabled=!1,t.textContent="Manage Subscription"),alert("Error opening subscription management portal: "+e.message)}}}function applyTheme(e){"dark"===e||"system"===e&&window.matchMedia("(prefers-color-scheme: dark)").matches?document.documentElement.classList.add("dark-theme"):document.documentElement.classList.remove("dark-theme")}function initTheme(){applyTheme(localStorage.getItem("theme-preference")||"system"),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",(()=>{"system"===localStorage.getItem("theme-preference")&&applyTheme("system")}))}document.addEventListener("DOMContentLoaded",(()=>{window.accountManager=new AccountManager,initTheme();const e=document.querySelector(".user-profile-section");if(e){const t=document.createElement("button");t.className="account-btn",t.innerHTML='<i class="fas fa-user-cog"></i>',t.title="Account Settings",t.style.cssText="\n        background: none;\n        border: none;\n        color: var(--basic-txt-color);\n        font-size: 18px;\n        cursor: pointer;\n        margin-right: 10px;\n      ",t.addEventListener("click",(()=>{window.accountManager.showAccountModal()}));const n=e.querySelector(".logout-btn");n?e.insertBefore(t,n):e.appendChild(t)}}));